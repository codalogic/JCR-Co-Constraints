<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "http://xml.resource.org/authoring/rfc2629.dtd"
[
	<!ENTITY RFC7159 PUBLIC ''
 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7159.xml'>
]>
<?rfc toc="true"?>
<rfc category="std" docName="draft-cordell-jcr-co-constraints-00" ipr="trust200902">
	<front>
		<title abbrev="JCR Co-Constraints">Co-Constraints for JSON Content Rules</title>
		<author fullname="Pete Cordell" initials="P." surname="Cordell">
			<organization>Codalogic</organization>
			<address>
				<postal>
					<street>PO Box 30</street>
					<city>Ipswitch</city>
					<country>UK</country>
					<code>IP5 2WY</code>
				</postal>
				<email>pete.cordell@codalogic.com</email>
				<uri>http://www.codalogic.com</uri>
			</address>
		</author>
		<author fullname="Andrew Lee Newton" initials="A.L." surname="Newton">
			<organization abbrev="ARIN">American Registry for Internet Numbers</organization>
			<address>
				<postal>
					<street>3635 Concorde Parkway</street>
					<city>Chantilly</city>
					<region>VA</region>
					<country>US</country>
					<code>20151</code>
				</postal>
				<email>andy@arin.net</email>
				<uri>http://www.arin.net</uri>
			</address>
		</author>
		<date/>
		<abstract>
			<t>
				JSON Content Rules (JCR) provides a powerful, intuitive and concise method for defining the structure of <xref target="RFC7159">JSON</xref> messages.  However, modern JSON usage patterns occasionally mean that JCR alone is not able to capture the required constraints in a satisfactory way.  This document describes JCR Co-Constraints (JCRCC) which defines additional JCR directives and annotations that can be added to a JCR ruleset in order to define more detailed constraints on JSON messages.
			</t>
		</abstract>
	</front>

	<middle>
		<section title="Introduction">
			<t>
				<xref target="JCR">JSON Content Rules</xref> provides a powerful, intuitive and concise method for defining the structure of <xref target="RFC7159">JSON</xref> messages.  In addition to describing the overall structure of JSON messages, JCR aims to capture the constraints that are imposed on individual items within a message.  However, modern JSON usage occasionally requires constraints that can’t be expressed by JCR alone.  JCR Co-Constraints (JCRCC) defines additional JCR directives and annotations that can be added to a JCR ruleset in order to define more detailed constraints on items within a JSON message, and also supports specifying constraints that depend on the relationship of multiple JSON items.
			</t>
			<t>
				JCRCC constraints represent an additional layer of validation on top of the validation provided by JCR alone.  JCRCC constraints may indicate that a JSON instance that was determined to be valid by the rules of a JCR ruleset, is in fact invalid.  However, if the JCR ruleset indicates that the JSON instance is invalid, JCRCC constraints can not override that and declare the instance valid.  A JCR processor MAY ignore the JCRCC annotations and directives, perhaps only issuing a warning for encountering an unknown annotation or directive.
			</t>
			<t>
				JCRCC uses the annotations @{id}, @{when} and @{assert} along with the directive #{constraint}.  The @{id} annotation is used to identify an item in a JSON message that contributes to the assessment of a JSON instance's validity.  The other three each include a 'condition' expression that yields a Boolean true or false result.  The validity of the JSON instance is dependent on the results of the various condition expressions.  Condition expressions are made up of identifiers, comparators, combiners and functions.  Each of these aspects is described in more detail below.
			</t>
		</section>
		<section title="Definitions">
<t><list style="hanging" hangIndent="6">
     <t hangText="JSON instance -"><vspace />A JSON message that is being validated against a JCR ruleset (which may augmented using JCRCC).</t>
     <t hangText="JSON instance item -"><vspace />An object member or a value in a JSON instance.  Often JCRCC annotations will define an identifier that will be associated with a JSON instance item.</t>
</list></t>
		</section>
		<section title="Annotations and Directives">
			<t>
       JCRCC uses the annotations @{id}, @{when} and @{assert} plus the directive #{constraint}.</t>
			<section title="The @{id} Annotation">
			<t>
       The @{id} annotation creates an identifier for a rule in a JCR ruleset.  A maximum of one @{id} annotation is permitted per rule.  It has the form:</t>
			<figure>
				<artwork xml:space="preserve">
   	@{id name}
                </artwork>
			</figure>
			<t>where 'name' corresponds to the 'name' production in the JCR ABNF. </t>
			<t>The @{id} annotation associates an identifier with the rule on which it is placed.  The identifier can then be used in condition expressions to reference the corresponding item in JSON instance items that are mapped to the JCR rule during validation.</t>
			<t>For example, a JCR rule of:</t>
			<figure>
				<artwork xml:space="preserve">
   	"type" @{id t} : string
                </artwork>
			</figure>
			<t>might associate the identifier 't' with a JSON instance item such as:</t>
			<figure>
				<artwork xml:space="preserve">
   	"type" : "shutdown"
                </artwork>
			</figure>
			</section>
			<section title="The @{when} Annotation">
			<t>The @{when} annotation has two similar roles.  If a JCR rule indicates that a JSON instance item is optional, then it can be used to describe the conditions when the item is present or absent.  Similarly, if a JCR rule indicates that an item has a group or type choice as its type, then the @{when} annotation can be used to indicate which of the possible sub-rules is applicable in the current validation instance.  Only one @{when} annotation per rule is permitted.</t>
			<t>The @{when} annotation includes a single 'condition'.  In the case of using the @{when} annotation with an optional instance, if the condition yields a 'true' result, then the item associated with the JCR rule MUST be present, otherwise it MUST be absent.</t>
			<t>When the @{when} annotation is used to select the applicable member/type rule within a group or type choice, the condition of each @{when} annotation is evaluated in turn (from left to right as shown in the JCR rule) and the member/type rule that corresponds to the first @{when} condition that yields a 'true' result is selected.  If none of the @{when} annotations on a group or type choice yields true, this indicates an invalid instance.  When a member/type rule within a group or type choice that has @{when} annotations on other members/types, but does not itself have an @{when} annotation, this indicates the default case.  In essence, if a rule has @{when} annotations, then an absent @{when} annotation on a member/type rule is equivalent to @{when true}.</t>
			<t>As an example, a @{when} annotation on an optional item may look as follows:</t>
			<figure>
				<artwork xml:space="preserve">
   	? @{when $t == "shutdown"} "uptime" : integer
                </artwork>
			</figure>
			<t>This indicates that the "uptime" member should be present if the JSON instance item associated with a JCR rule with an @{id t} annotation has the value "shutdown".</t>
			<t>A @{when} annotation on a group may look as follows:</t>
			<figure>
				<artwork xml:space="preserve">
   	details ( @{when $t == "boot"} boot-details |
                @{when $t == "shutdown"} shutdown-details |
                default-details )
                </artwork>
			</figure>
			<t>This indicates that the JCR rule named 'boot-details' is applicable when the JSON instance item associated with an @{id t} annotation has the value "boot", the rule 'shutdown-details' is applicable when the value of the $t item is "shutdown", otherwise the rule 'default-details' is applicable.  (The rules identified by 'boot-details', 'shutdown-details' and 'default-details' might be groups that act as mixins for the rule in which the 'details' rule is used.)</t>
			<t>The @{when} annotation can reference identifiers in siblings, ancestors, and descendants. To avoid circular or ambiguous dependencies, the identifiers in descendants must not be part of arrays or descendants of itself or descendants of siblings that have @{when} annotations.  The latter restriction avoids needing to know whether a secondary @{when} annotation yields 'true' in order to determine if the @{when} annotation being assessed yields 'true'.  When seeking identifiers, siblings are inspected first, followed by the nearest ancestor, followed by the nearest descendent.  If it is desired to look for an identifier that is a descendent without first looking for an identifier that is an ancestor, then the 'descendent()' method can be called on the name of the identifier.  For example:</t>
			<figure>
				<artwork xml:space="preserve">
   	? @{when descendent($s) == "on"} "watts" : integer
                </artwork>
			</figure>
			</section>
			<section title="The @{assert} Annotation">
			<t>The @{assert} annotation is used to specify additional constraints on an item that can't be expressed using JCR alone.  The @{assert} annotation contains a single condition that must yield 'true' for the JSON instance item to be considered valid.  A maximum of one @{assert} annotations is permitted per rule.</t>
			<t>@{assert} annotations are evaluated after all sibling @{when} annotations have been evaluated, and constraints specified by the underlying JCR rule have been assessed.  An item may have both a @{when} annotation and a @{assert} annotation.  If the condition in the @{when} annotation yields 'false', then the item it corresponds to should be absent in the JSON instance, so the @{assert} condition is not evaluated.  If, for example, the JSON instance item does not have the type specified by the underlying JCR rule, then validation fails at that point and the @{assert} annotation is not assessed.</t>
			<t>When seeking identifiers referenced in an @{assert} annotation, siblings are inspected first, followed by the nearest ancestor, followed by the nearest descendent.  If it is desired to look for an identifier that is a descendent without first looking for an identifier that is an ancestor, then the 'descendent()' method can be called on the name of the identifier.</t>
			<t>An example @{assert} annotation might be:</t>
			<figure>
				<artwork xml:space="preserve">
   	"index" @{assert $ % 2 == 0} : integer ; Must be even
                </artwork>
			</figure>
			</section>
			<section title="The #{constraint} Directive">
			<t>The #{constraint} directive offers a way to express conditions external to @{when} and @{assert} annotations.  #{constraint} directives can be viewed as a macro substitution mechanism.  @{when} and @{assert} annotations, and other #{constraint} directives can reference conditions defined by a #{constraint}.  The format of a #{constraint} directive is as follows:</t>
			<figure>
				<artwork xml:space="preserve">
   	#{constraint name condition}
                </artwork>
			</figure>
			<t>where 'name' corresponds to the 'name' production in the JCR ABNF, and the 'condition' is the same as used in @{when} and @{assert} annotations and is as described below.</t>
			<t>Conceptually at least, the 'condition' in a #{constraint} directive is substituted into @{when}, @{assert} annotations and other #{constraint} directives wherever the constraint's 'name' is referenced.  (In practice, for the purposes of efficiency, the result of a #{constraint} directive may be cached or memoized, to avoid repeated computation of the sub-condition.  However, such optimizations are beyond the scope of this documents.)</t>
			<t>An example usage, equating to the earlier example, might be:</t>
			<figure>
				<artwork xml:space="preserve">
      #{constraint is_even $ % 2 == 0}
   	"index" @{assert @is_even} : integer ; Must be even
                </artwork>
			</figure>

			</section>
		</section>
		<section title="Conditions">
			<t>The @{when} annotation, @{assert} annotation and #{constraint} directive contain 'conditions'.  These are made up of 'identifiers', 'comparators', 'combiners' and 'functions' as described below.</t>
			<section title="Identifiers">
			<t>Identifiers are used to refer to items in the JCR, and #{constraint} directives.  They have a few different forms.</t>
			<t>'$' on its own refers to the member / type expressed by the current JCR rule.  For example:</t>
			<figure>
				<artwork xml:space="preserve">
   	int-pairs @{assert count( $ ) % 2 == 0} [ : integer ]
                </artwork>
			</figure>
			<t>The form '$name' and '$alias.name' form refers to rules identified by @{id} annotations.  An 'alias' is set up using the normal JCR #import directive and allows members / types outside the current ruleset to be identified.  For example:</t>
			<figure>
				<artwork xml:space="preserve">
   	"type" @{id t} : string
   	? "uptime" @{when $t == "shutdown"} : integer
                </artwork>
			</figure>
			<t>The '@name' and '@alias.name' refers to a condition expressed in a #{constraint} directive.  An 'alias' is set up using the normal JCR #import directive and allows constraints outside the current ruleset to be identified.  For example:</t>
			<figure>
				<artwork xml:space="preserve">
      #{constraint is_even $ % 2 == 0}
   	"index" : @{assert @is_even} integer ; Must be even
                </artwork>
			</figure>
			</section>
			<section title="Standalone Id Refernces">
			<t>A reference to a member / type that is not part of a 'comparator' sub-expression yields 'true' if the referenced item is present in the JSON instance being validated, and 'false' if not.  For example, the following says that the 'dob' member must be present if the 'name' member is present:</t>
			<figure>
				<artwork xml:space="preserve">
      ? "name" @{id n} : string,
      ? "dob" @{when $n} : full-date
                </artwork>
			</figure>
			</section>
			<section title="Operators">
			<t>The values of JSON instance items identified by identifiers, values yielded by other 'operators' and values returned by 'functions' can be subject to computations using 'operators'.  The supported operators are '+', '-', '*', '/' and '%'.  They have their usual C-family programming language meaning.</t>
			</section>
			<section title="Comparators">
			<t>The values of JSON instance items identified by identifiers, values yielded by 'operators' and values returned by 'functions' can be compared using 'comparators'.  The comparators are the usual '&lt;', '&lt;=', '==', '!=', '>=' and '>', and have their usual C-family language meaning.  Comparators yield a 'true' or 'false' result.</t>
			<t>When an identifier referenced by a comparator is absent, then the comparison returns 'false'.  For example:</t>
			<figure>
				<artwork xml:space="preserve">
   	$t == "boot"
                </artwork>
			</figure>
			<t>is equivalent to:</t>
			<figure>
				<artwork xml:space="preserve">
   	( $t &amp;&amp; $t == "boot" )
                </artwork>
			</figure>
			<t>Similarly:</t>
			<figure>
				<artwork xml:space="preserve">
   	$t == "boot" || $other == "close"
                </artwork>
			</figure>
			<t>is equivalent to:</t>
			<figure>
				<artwork xml:space="preserve">
   	( $t &amp;&amp; $t == "boot" ) || ( $other &amp;&amp; $other == "close" )
                </artwork>
			</figure>
			<t>And:</t>
			<figure>
				<artwork xml:space="preserve">
   	length( $first ) > length( $second )
                </artwork>
			</figure>
			<t>is equivalent to:</t>
			<figure>
				<artwork xml:space="preserve">
   	( $first &amp;&amp; $second &amp;&amp; length( $first ) > length( $second ) )
                </artwork>
			</figure>
			</section>
			<section title="Combiners">
			<t>Multiple results of 'comparators' or standalone identifiers can be combined using 'combiners'.  The supported combiners are '&amp;&amp;' and '||'.  They have their usual C-family programming language meaning.</t>
			</section>
			<section title="Functions">
			<t>JCRCC supports a number of functions that can be used to yield specific information about a JSON instance item referenced by an identifier.  Some functions can operate on multiple types of argument, such as identifiers or strings.  In the function descriptions below, arguments that can take multiple different types have each type listed, separated by the pipe symbol (|).  For example, an argument description of "identifier | string" indicates that the function can take an identifier or a string as an argument.</t>
			<t>The functions are as follows:</t>
<t><list style="hanging" hangIndent="6">
     <t hangText="name( identifier ) -"><vspace />Returns the member name of the JSON instance item associated with the identifier as a string.</t>
     <t hangText="length( identifier | string ) -"><vspace />If the argument is an identifier, the value of the JSON instance item associated it MUST be a string.  The function returns the length of the string in Unicode code points.  To return the length of a JSON instance item's member name, do "length( name( $t ) )".</t>
     <t hangText="count( identifier ) -"><vspace />The JSON instance item associated with the identifier MUST be an array.  The function returns the number of items in the array.</t>
     <t hangText="capture( identifier | string, regex ) -"><vspace />The regex in the capture function MUST include a capture expression (i.e. a suitable term in brackets).  The regex is applied to the input string, or the string value of the JSON instance item associated with the identifier, and the sub-string captured by the regex capture expression is returned. </t>
     <t hangText="descendent( identifier ) -"><vspace />The normal order of identifier look up is, siblings, followed by ancestors, followed by descendents.  This function will cause the lookup to be in the order siblings followed by descendents.  It returns a reference to a JSON instance item that can be used in place of an identifier. For example, "length( name( descendent( $t ) ) )".</t>
     <t hangText="error( q_string ) -"><vspace />This function can be used for reporting error messages.  The text in the q_string may be subject to value interpolation and internationalization by an implementation, but this is not required.  It always returns false.</t>
     <t hangText="is_integer( identifier ), is_float( identifier ) etc. -"><vspace />This set of functions return true if the JSON instance item associated with the identifier has the corresponding type, and false otherwise.</t>
</list></t>
			</section>
			<section title="If-Then-Else">
			</section>
		</section>
		<section title="ABNF">
			<t>The ABNF is 'work in progress'.  It currently looks as below.  This does not capture where spaces are permitted.</t>
			<figure>
				<artwork xml:space="preserve"><![CDATA[
condition = relational ( * ( "&&" relational ) / * ( "||" relational ) )

relational = ["!"] value / value comparator value /
             ["!"] condition-group / ternary

value = identifier / constant / function / "@" [ alias "." ] name

identifier = "$" / "$" [ alias "." ] name

constant = "null" / "true" / "false" / integer / float /
           q_string / regex

comparator = "==" / "!=" / "<" / "<=" / ">=" / ">"

condition-group = "(" condition ")"

ternary = "if" "(" condition ")" "then" "(" condition ")"
          "else" "(" condition ")"

function = "name" "(" identifier ")" /
           "length" "(" identifier ")" /
           "count" "(" identifier ")" /
           "capture" "(" regex "," identifier ")" /
           "descendent" "(" identifier ")" /
           "error" "(" q_string ")" /
           "is_integer" "(" identifier ")" /
           "is_float" "(" identifier ")" /
           etc...
                ]]></artwork>
			</figure>
		</section>
	</middle>

	<back>
		<references title="Normative References">

			<reference anchor="JCR" target="https://www.ietf.org/id/draft-newton-json-content-rules-05.txt">
				<front>
					<title>A Language for Rules Describing JSON Content</title>
					<author fullname="Andrew Lee Newton" initials="A.L." surname="Newton">
						<organization abbrev="ARIN">American Registry for Internet Numbers</organization>
					</author>
					<date month="October" year="2015" />
				</front>
			</reference>

			&RFC7159;
		</references>

		<references title="Infomative References">
			<reference anchor="ARIN_JCR_VALIDATOR" target="https://github.com/arineng/jcrvalidator">
				<front>
					<title>JSON Content Rules Validator (Work In Progress)</title>
					<author>
						<organization>American Registry for Internet Numbers</organization>
					</author>
					<date/>
				</front>
			</reference>
			<reference anchor="CODALOGIC_JCR_VALIDATOR" target="https://github.com/codalogic/cl-jcr-parser">
				<front>
					<title>cl-jcr-parser (Work In Progress)</title>
					<author>
						<organization>Codalogic</organization>
					</author>
					<date/>
				</front>
			</reference>
		</references>
		<section title="JCR Implementations">
			<t>
				The following implementations, <xref target="ARIN_JCR_VALIDATOR"></xref> and
				<xref target="CODALOGIC_JCR_VALIDATOR"></xref> have influenced the development
				of this document.
			</t>
		</section>
	</back>
</rfc>
